# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T10:11:41+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class AnalysisType(Enum):
    Security = 'Security'
    CodeQuality = 'CodeQuality'


class AnalysisTypes(RootModel[List[AnalysisType]]):
    root: List[AnalysisType]


class Arn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:[a-z-]+:[\w-]+$',
            min_length=1,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:[a-z-]+:[\w-]+$',
        min_length=1,
        max_length=1600,
    )


class AssociationArn(
    RootModel[
        constr(
            pattern=r'^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:association:[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
            min_length=1,
            max_length=1600,
        )
    ]
):
    root: constr(
        pattern=r'^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:association:[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
        min_length=1,
        max_length=1600,
    )


class AssociationId(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class BranchName(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class BuildArtifactsObjectKey(
    RootModel[constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=1024)


class ClientRequestToken(
    RootModel[constr(pattern=r'^[\w-]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[\w-]+$', min_length=1, max_length=64)


class CodeReviewName(
    RootModel[constr(pattern=r'[a-zA-Z0-9-_]*', min_length=1, max_length=100)]
):
    root: constr(pattern=r'[a-zA-Z0-9-_]*', min_length=1, max_length=100)


class CommitId(RootModel[constr(min_length=6, max_length=64)]):
    root: constr(min_length=6, max_length=64)


class ConfigFileState(Enum):
    Present = 'Present'
    Absent = 'Absent'
    PresentWithErrors = 'PresentWithErrors'


class ConflictException(RootModel[Any]):
    root: Any


class ConnectionArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[\w]+)*:.+:.+:[0-9]{12}:.+', min_length=0, max_length=256
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[\w]+)*:.+:.+:[0-9]{12}:.+', min_length=0, max_length=256
    )


class DescribeCodeReviewRequest(BaseModel):
    pass


class DescribeRecommendationFeedbackRequest(BaseModel):
    pass


class DescribeRepositoryAssociationRequest(BaseModel):
    pass


class DisassociateRepositoryRequest(BaseModel):
    pass


class EncryptionOption(Enum):
    AWS_OWNED_CMK = 'AWS_OWNED_CMK'
    CUSTOMER_MANAGED_CMK = 'CUSTOMER_MANAGED_CMK'


class EventName(
    RootModel[constr(pattern=r'^[ \-A-Z_a-z]+$', min_length=1, max_length=32)]
):
    root: constr(pattern=r'^[ \-A-Z_a-z]+$', min_length=1, max_length=32)


class EventState(
    RootModel[constr(pattern=r'^[ \-A-Z_a-z]+$', min_length=1, max_length=32)]
):
    root: constr(pattern=r'^[ \-A-Z_a-z]+$', min_length=1, max_length=32)


class FilePath(RootModel[constr(min_length=1, max_length=1024)]):
    root: constr(min_length=1, max_length=1024)


class FindingsCount(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class JobState(Enum):
    Completed = 'Completed'
    Pending = 'Pending'
    Failed = 'Failed'
    Deleting = 'Deleting'


class JobStates(RootModel[List[JobState]]):
    root: List[JobState] = Field(..., max_length=3, min_length=1)


class KMSKeyId(
    RootModel[constr(pattern=r'[a-zA-Z0-9-]+', min_length=1, max_length=2048)]
):
    root: constr(pattern=r'[a-zA-Z0-9-]+', min_length=1, max_length=2048)


class LineNumber(RootModel[int]):
    root: int


class LinesOfCodeCount(RootModel[int]):
    root: int


class ListCodeReviewsMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class ListCodeReviewsRequest(BaseModel):
    pass


class ListRecommendationFeedbackRequest(BaseModel):
    pass


class ListRecommendationsMaxResults(RootModel[conint(ge=1, le=300)]):
    root: conint(ge=1, le=300)


class ListRecommendationsRequest(BaseModel):
    pass


class ListRepositoryAssociationsRequest(BaseModel):
    pass


class ListTagsForResourceRequest(BaseModel):
    pass


class LongDescription(
    RootModel[constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=1000)]
):
    root: constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=1000)


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class Metrics(BaseModel):
    FindingsCount_1: Optional[FindingsCount] = Field(None, alias='FindingsCount')
    MeteredLinesOfCodeCount: Optional[LinesOfCodeCount] = None
    SuppressedLinesOfCodeCount: Optional[LinesOfCodeCount] = None


class MetricsSummary(BaseModel):
    FindingsCount_1: Optional[FindingsCount] = Field(None, alias='FindingsCount')
    MeteredLinesOfCodeCount: Optional[LinesOfCodeCount] = None
    SuppressedLinesOfCodeCount: Optional[LinesOfCodeCount] = None


class Name(RootModel[constr(pattern=r'^\S[\w.-]*$', min_length=1, max_length=100)]):
    root: constr(pattern=r'^\S[\w.-]*$', min_length=1, max_length=100)


class Names(RootModel[List[Name]]):
    root: List[Name] = Field(..., max_length=3, min_length=1)


class NextToken(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class NotFoundException(RootModel[Any]):
    root: Any


class Owner(RootModel[constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=100)]):
    root: constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=100)


class Owners(RootModel[List[Owner]]):
    root: List[Owner] = Field(..., max_length=3, min_length=1)


class ProviderType(Enum):
    CodeCommit = 'CodeCommit'
    GitHub = 'GitHub'
    Bitbucket = 'Bitbucket'
    GitHubEnterpriseServer = 'GitHubEnterpriseServer'
    S3Bucket = 'S3Bucket'


class ProviderTypes(RootModel[List[ProviderType]]):
    root: List[ProviderType] = Field(..., max_length=3, min_length=1)


class PullRequestId(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class PutRecommendationFeedbackResponse(BaseModel):
    pass


class Reaction(Enum):
    ThumbsUp = 'ThumbsUp'
    ThumbsDown = 'ThumbsDown'


class Reactions(RootModel[List[Reaction]]):
    root: List[Reaction] = Field(..., max_length=1, min_length=0)


class RecommendationCategory(Enum):
    AWSBestPractices = 'AWSBestPractices'
    AWSCloudFormationIssues = 'AWSCloudFormationIssues'
    DuplicateCode = 'DuplicateCode'
    CodeMaintenanceIssues = 'CodeMaintenanceIssues'
    ConcurrencyIssues = 'ConcurrencyIssues'
    InputValidations = 'InputValidations'
    PythonBestPractices = 'PythonBestPractices'
    JavaBestPractices = 'JavaBestPractices'
    ResourceLeaks = 'ResourceLeaks'
    SecurityIssues = 'SecurityIssues'
    CodeInconsistencies = 'CodeInconsistencies'


class RecommendationId(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class RecommendationIds(RootModel[List[RecommendationId]]):
    root: List[RecommendationId] = Field(..., max_length=100, min_length=1)


class RepositoryAssociationState(Enum):
    Associated = 'Associated'
    Associating = 'Associating'
    Failed = 'Failed'
    Disassociating = 'Disassociating'
    Disassociated = 'Disassociated'


class RepositoryAssociationStates(RootModel[List[RepositoryAssociationState]]):
    root: List[RepositoryAssociationState] = Field(..., max_length=5, min_length=1)


class RepositoryHeadSourceCodeType(BaseModel):
    BranchName_1: BranchName = Field(..., alias='BranchName')


class RepositoryNames(RootModel[List[Name]]):
    root: List[Name] = Field(..., max_length=100, min_length=1)


class RequestId(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class Requester(
    RootModel[constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=100)


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class RuleId(
    RootModel[
        constr(pattern=r'^\S+\/[a-zA-Z0-9-]+@v\d+\.\d+$', min_length=1, max_length=64)
    ]
):
    root: constr(pattern=r'^\S+\/[a-zA-Z0-9-]+@v\d+\.\d+$', min_length=1, max_length=64)


class RuleName(RootModel[constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=100)]):
    root: constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=100)


class RuleTag(RootModel[constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=50)]):
    root: constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=50)


class RuleTags(RootModel[List[RuleTag]]):
    root: List[RuleTag] = Field(..., max_length=20, min_length=1)


class S3BucketName(
    RootModel[constr(pattern=r'^\S(.*\S)?$', min_length=3, max_length=63)]
):
    root: constr(pattern=r'^\S(.*\S)?$', min_length=3, max_length=63)


class S3Repository(BaseModel):
    BucketName: S3BucketName
    Name_1: Name = Field(..., alias='Name')


class Severity(Enum):
    Info = 'Info'
    Low = 'Low'
    Medium = 'Medium'
    High = 'High'
    Critical = 'Critical'


class ShortDescription(
    RootModel[constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=200)]
):
    root: constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=200)


class SourceCodeArtifactsObjectKey(
    RootModel[constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=1024)]
):
    root: constr(pattern=r'^\S(.*\S)?$', min_length=1, max_length=1024)


class StateReason(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class Text(RootModel[constr(min_length=1, max_length=5000)]):
    root: constr(min_length=1, max_length=5000)


class ThirdPartySourceRepository(BaseModel):
    ConnectionArn_1: ConnectionArn = Field(..., alias='ConnectionArn')
    Name_1: Name = Field(..., alias='Name')
    Owner_1: Owner = Field(..., alias='Owner')


class ThrottlingException(RootModel[Any]):
    root: Any


class TimeStamp(RootModel[datetime]):
    root: datetime


class Type(Enum):
    PullRequest = 'PullRequest'
    RepositoryAnalysis = 'RepositoryAnalysis'


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UserId(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class UserIds(RootModel[List[UserId]]):
    root: List[UserId] = Field(..., max_length=100, min_length=1)


class ValidationException(RootModel[Any]):
    root: Any


class VendorName(Enum):
    GitHub = 'GitHub'
    GitLab = 'GitLab'
    NativeS3 = 'NativeS3'


class ProviderType1(RootModel[List[ProviderType]]):
    root: List[ProviderType] = Field(..., max_length=3, min_length=1)


class State(RootModel[List[RepositoryAssociationState]]):
    root: List[RepositoryAssociationState] = Field(..., max_length=5, min_length=1)


class Name1(RootModel[List[Name]]):
    root: List[Name] = Field(..., max_length=3, min_length=1)


class Owner1(RootModel[List[Owner]]):
    root: List[Owner] = Field(..., max_length=3, min_length=1)


class KMSKeyDetails(BaseModel):
    EncryptionOption_1: Optional[EncryptionOption] = Field(
        None, alias='EncryptionOption'
    )
    KMSKeyId_1: Optional[KMSKeyId] = Field(None, alias='KMSKeyId')


class States(RootModel[List[JobState]]):
    root: List[JobState] = Field(..., max_length=3, min_length=1)


class FeedbackPutRequest(BaseModel):
    CodeReviewArn: constr(
        pattern=r'^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:[a-z-]+:[\w-]+$',
        min_length=1,
        max_length=1600,
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CodeReview.html">CodeReview</a> object. ',
    )
    Reactions: List[Reaction] = Field(
        ...,
        description='List for storing reactions. Reactions are utf-8 text code for emojis. If you send an empty list it clears all your feedback.',
        max_length=1,
        min_length=0,
    )
    RecommendationId: constr(min_length=1, max_length=64) = Field(
        ...,
        description='The recommendation ID that can be used to track the provided recommendations and then to collect the feedback.',
    )


class TagsResourceArnPostRequest(BaseModel):
    Tags: Dict[str, TagValue] = Field(
        ...,
        description='<p>An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:</p> <ul> <li> <p>A <i>tag key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag keys are case sensitive.</p> </li> <li> <p>An optional field known as a <i>tag value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.</p> </li> </ul>',
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class BranchDiffSourceCodeType(BaseModel):
    DestinationBranchName: BranchName
    SourceBranchName: BranchName


class CodeArtifacts(BaseModel):
    BuildArtifactsObjectKey_1: Optional[BuildArtifactsObjectKey] = Field(
        None, alias='BuildArtifactsObjectKey'
    )
    SourceCodeArtifactsObjectKey_1: SourceCodeArtifactsObjectKey = Field(
        ..., alias='SourceCodeArtifactsObjectKey'
    )


class CodeCommitRepository(BaseModel):
    Name_1: Name = Field(..., alias='Name')


class CommitDiffSourceCodeType(BaseModel):
    DestinationCommit: Optional[CommitId] = None
    MergeBaseCommit: Optional[CommitId] = None
    SourceCommit: Optional[CommitId] = None


class EventInfo(BaseModel):
    Name: Optional[EventName] = None
    State: Optional[EventState] = None


class PutRecommendationFeedbackRequest(BaseModel):
    CodeReviewArn: Arn
    Reactions_1: Reactions = Field(..., alias='Reactions')
    RecommendationId_1: RecommendationId = Field(..., alias='RecommendationId')


class RecommendationFeedback(BaseModel):
    CodeReviewArn: Optional[Arn] = None
    CreatedTimeStamp: Optional[TimeStamp] = None
    LastUpdatedTimeStamp: Optional[TimeStamp] = None
    Reactions_1: Optional[Reactions] = Field(None, alias='Reactions')
    RecommendationId_1: Optional[RecommendationId] = Field(
        None, alias='RecommendationId'
    )
    UserId_1: Optional[UserId] = Field(None, alias='UserId')


class RecommendationFeedbackSummary(BaseModel):
    Reactions_1: Optional[Reactions] = Field(None, alias='Reactions')
    RecommendationId_1: Optional[RecommendationId] = Field(
        None, alias='RecommendationId'
    )
    UserId_1: Optional[UserId] = Field(None, alias='UserId')


class Repository(BaseModel):
    Bitbucket: Optional[ThirdPartySourceRepository] = None
    CodeCommit: Optional[CodeCommitRepository] = None
    GitHubEnterpriseServer: Optional[ThirdPartySourceRepository] = None
    S3Bucket: Optional[S3Repository] = None


class RepositoryAssociationSummary(BaseModel):
    AssociationArn: Optional[Arn] = None
    AssociationId_1: Optional[AssociationId] = Field(None, alias='AssociationId')
    ConnectionArn_1: Optional[ConnectionArn] = Field(None, alias='ConnectionArn')
    LastUpdatedTimeStamp: Optional[TimeStamp] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    Owner_1: Optional[Owner] = Field(None, alias='Owner')
    ProviderType_1: Optional[ProviderType] = Field(None, alias='ProviderType')
    State: Optional[RepositoryAssociationState] = None


class RequestMetadata(BaseModel):
    EventInfo_1: Optional[EventInfo] = Field(None, alias='EventInfo')
    RequestId_1: Optional[RequestId] = Field(None, alias='RequestId')
    Requester_1: Optional[Requester] = Field(None, alias='Requester')
    VendorName_1: Optional[VendorName] = Field(None, alias='VendorName')


class RuleMetadata(BaseModel):
    LongDescription_1: Optional[LongDescription] = Field(None, alias='LongDescription')
    RuleId_1: Optional[RuleId] = Field(None, alias='RuleId')
    RuleName_1: Optional[RuleName] = Field(None, alias='RuleName')
    RuleTags_1: Optional[RuleTags] = Field(None, alias='RuleTags')
    ShortDescription_1: Optional[ShortDescription] = Field(
        None, alias='ShortDescription'
    )


class S3RepositoryDetails(BaseModel):
    BucketName: Optional[S3BucketName] = None
    CodeArtifacts_1: Optional[CodeArtifacts] = Field(None, alias='CodeArtifacts')


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    Tags: TagMap


class AssociationsPostRequest(BaseModel):
    ClientRequestToken: Optional[
        constr(pattern=r'^[\w-]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Amazon CodeGuru Reviewer uses this value to prevent the accidental creation of duplicate repository associations if there are failures and retries.',
    )
    KMSKeyDetails_1: Optional[KMSKeyDetails] = Field(
        None,
        alias='KMSKeyDetails',
        description='<p>An object that contains:</p> <ul> <li> <p>The encryption option for a repository association. It is either owned by Amazon Web Services Key Management Service (KMS) (<code>AWS_OWNED_CMK</code>) or customer managed (<code>CUSTOMER_MANAGED_CMK</code>).</p> </li> <li> <p>The ID of the Amazon Web Services KMS key that is associated with a repository association.</p> </li> </ul>',
    )
    Repository_1: Repository = Field(
        ...,
        alias='Repository',
        description='Information about an associated Amazon Web Services CodeCommit repository or an associated repository that is managed by Amazon Web Services CodeStar Connections (for example, Bitbucket). This <code>Repository</code> object is not used if your source code is in an associated GitHub repository.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='<p>An array of key-value pairs used to tag an associated repository. A tag is a custom attribute label with two parts:</p> <ul> <li> <p>A <i>tag key</i> (for example, <code>CostCenter</code>, <code>Environment</code>, <code>Project</code>, or <code>Secret</code>). Tag keys are case sensitive.</p> </li> <li> <p>An optional field known as a <i>tag value</i> (for example, <code>111122223333</code>, <code>Production</code>, or a team name). Omitting the tag value is the same as using an empty string. Like tag keys, tag values are case sensitive.</p> </li> </ul>',
    )


class AssociateRepositoryRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    KMSKeyDetails_1: Optional[KMSKeyDetails] = Field(None, alias='KMSKeyDetails')
    Repository_1: Repository = Field(..., alias='Repository')
    Tags: Optional[TagMap] = None


class DescribeRecommendationFeedbackResponse(BaseModel):
    RecommendationFeedback_1: Optional[RecommendationFeedback] = Field(
        None, alias='RecommendationFeedback'
    )


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagMap] = None


class RecommendationFeedbackSummaries(RootModel[List[RecommendationFeedbackSummary]]):
    root: List[RecommendationFeedbackSummary]


class RecommendationSummary(BaseModel):
    Description: Optional[Text] = None
    EndLine: Optional[LineNumber] = None
    FilePath_1: Optional[FilePath] = Field(None, alias='FilePath')
    RecommendationCategory_1: Optional[RecommendationCategory] = Field(
        None, alias='RecommendationCategory'
    )
    RecommendationId_1: Optional[RecommendationId] = Field(
        None, alias='RecommendationId'
    )
    RuleMetadata_1: Optional[RuleMetadata] = Field(None, alias='RuleMetadata')
    Severity_1: Optional[Severity] = Field(None, alias='Severity')
    StartLine: Optional[LineNumber] = None


class RepositoryAssociation(BaseModel):
    AssociationArn: Optional[Arn] = None
    AssociationId_1: Optional[AssociationId] = Field(None, alias='AssociationId')
    ConnectionArn_1: Optional[ConnectionArn] = Field(None, alias='ConnectionArn')
    CreatedTimeStamp: Optional[TimeStamp] = None
    KMSKeyDetails_1: Optional[KMSKeyDetails] = Field(None, alias='KMSKeyDetails')
    LastUpdatedTimeStamp: Optional[TimeStamp] = None
    Name_1: Optional[Name] = Field(None, alias='Name')
    Owner_1: Optional[Owner] = Field(None, alias='Owner')
    ProviderType_1: Optional[ProviderType] = Field(None, alias='ProviderType')
    S3RepositoryDetails_1: Optional[S3RepositoryDetails] = Field(
        None, alias='S3RepositoryDetails'
    )
    State: Optional[RepositoryAssociationState] = None
    StateReason_1: Optional[StateReason] = Field(None, alias='StateReason')


class RepositoryAssociationSummaries(RootModel[List[RepositoryAssociationSummary]]):
    root: List[RepositoryAssociationSummary]


class S3BucketRepository(BaseModel):
    Details: Optional[S3RepositoryDetails] = None
    Name_1: Name = Field(..., alias='Name')


class SourceCodeType(BaseModel):
    BranchDiff: Optional[BranchDiffSourceCodeType] = None
    CommitDiff: Optional[CommitDiffSourceCodeType] = None
    RepositoryHead: Optional[RepositoryHeadSourceCodeType] = None
    RequestMetadata_1: Optional[RequestMetadata] = Field(None, alias='RequestMetadata')
    S3BucketRepository_1: Optional[S3BucketRepository] = Field(
        None, alias='S3BucketRepository'
    )


class AssociateRepositoryResponse(BaseModel):
    RepositoryAssociation_1: Optional[RepositoryAssociation] = Field(
        None, alias='RepositoryAssociation'
    )
    Tags: Optional[TagMap] = None


class CodeReview(BaseModel):
    AnalysisTypes_1: Optional[AnalysisTypes] = Field(None, alias='AnalysisTypes')
    AssociationArn_1: Optional[AssociationArn] = Field(None, alias='AssociationArn')
    CodeReviewArn: Optional[Arn] = None
    ConfigFileState_1: Optional[ConfigFileState] = Field(None, alias='ConfigFileState')
    CreatedTimeStamp: Optional[TimeStamp] = None
    LastUpdatedTimeStamp: Optional[TimeStamp] = None
    Metrics_1: Optional[Metrics] = Field(None, alias='Metrics')
    Name_1: Optional[Name] = Field(None, alias='Name')
    Owner_1: Optional[Owner] = Field(None, alias='Owner')
    ProviderType_1: Optional[ProviderType] = Field(None, alias='ProviderType')
    PullRequestId_1: Optional[PullRequestId] = Field(None, alias='PullRequestId')
    RepositoryName: Optional[Name] = None
    SourceCodeType_1: Optional[SourceCodeType] = Field(None, alias='SourceCodeType')
    State: Optional[JobState] = None
    StateReason_1: Optional[StateReason] = Field(None, alias='StateReason')
    Type_1: Optional[Type] = Field(None, alias='Type')


class CodeReviewSummary(BaseModel):
    CodeReviewArn: Optional[Arn] = None
    CreatedTimeStamp: Optional[TimeStamp] = None
    LastUpdatedTimeStamp: Optional[TimeStamp] = None
    MetricsSummary_1: Optional[MetricsSummary] = Field(None, alias='MetricsSummary')
    Name_1: Optional[Name] = Field(None, alias='Name')
    Owner_1: Optional[Owner] = Field(None, alias='Owner')
    ProviderType_1: Optional[ProviderType] = Field(None, alias='ProviderType')
    PullRequestId_1: Optional[PullRequestId] = Field(None, alias='PullRequestId')
    RepositoryName: Optional[Name] = None
    SourceCodeType_1: Optional[SourceCodeType] = Field(None, alias='SourceCodeType')
    State: Optional[JobState] = None
    Type_1: Optional[Type] = Field(None, alias='Type')


class CreateCodeReviewResponse(BaseModel):
    CodeReview_1: Optional[CodeReview] = Field(None, alias='CodeReview')


class DescribeCodeReviewResponse(BaseModel):
    CodeReview_1: Optional[CodeReview] = Field(None, alias='CodeReview')


class DescribeRepositoryAssociationResponse(BaseModel):
    RepositoryAssociation_1: Optional[RepositoryAssociation] = Field(
        None, alias='RepositoryAssociation'
    )
    Tags: Optional[TagMap] = None


class DisassociateRepositoryResponse(BaseModel):
    RepositoryAssociation_1: Optional[RepositoryAssociation] = Field(
        None, alias='RepositoryAssociation'
    )
    Tags: Optional[TagMap] = None


class ListRecommendationFeedbackResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RecommendationFeedbackSummaries_1: Optional[RecommendationFeedbackSummaries] = (
        Field(None, alias='RecommendationFeedbackSummaries')
    )


class ListRepositoryAssociationsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RepositoryAssociationSummaries_1: Optional[RepositoryAssociationSummaries] = Field(
        None, alias='RepositoryAssociationSummaries'
    )


class RecommendationSummaries(RootModel[List[RecommendationSummary]]):
    root: List[RecommendationSummary]


class RepositoryAnalysis(BaseModel):
    RepositoryHead: Optional[RepositoryHeadSourceCodeType] = None
    SourceCodeType_1: Optional[SourceCodeType] = Field(None, alias='SourceCodeType')


class Type1(BaseModel):
    AnalysisTypes_1: Optional[AnalysisTypes] = Field(None, alias='AnalysisTypes')
    RepositoryAnalysis_1: Optional[RepositoryAnalysis] = Field(
        None, alias='RepositoryAnalysis'
    )


class CodereviewsPostRequest(BaseModel):
    ClientRequestToken: Optional[
        constr(pattern=r'^[\w-]+$', min_length=1, max_length=64)
    ] = Field(
        None,
        description='Amazon CodeGuru Reviewer uses this value to prevent the accidental creation of duplicate code reviews if there are failures and retries.',
    )
    Name: constr(pattern=r'[a-zA-Z0-9-_]*', min_length=1, max_length=100) = Field(
        ...,
        description='The name of the code review. The name of each code review in your Amazon Web Services account must be unique.',
    )
    RepositoryAssociationArn: constr(
        pattern=r'^arn:aws[^:\s]*:codeguru-reviewer:[^:\s]+:[\d]{12}:association:[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$',
        min_length=1,
        max_length=1600,
    ) = Field(
        ...,
        description='<p>The Amazon Resource Name (ARN) of the <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_RepositoryAssociation.html">RepositoryAssociation</a> object. You can retrieve this ARN by calling <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_ListRepositoryAssociations.html">ListRepositoryAssociations</a>.</p> <p>A code review can only be created on an associated repository. This is the ARN of the associated repository.</p>',
    )
    Type: Type1 = Field(
        ...,
        description='<p>The type of a code review. There are two code review types:</p> <ul> <li> <p> <code>PullRequest</code> - A code review that is automatically triggered by a pull request on an associated repository.</p> </li> <li> <p> <code>RepositoryAnalysis</code> - A code review that analyzes all code under a specified branch in an associated repository. The associated repository is specified using its ARN in <a href="https://docs.aws.amazon.com/codeguru/latest/reviewer-api/API_CreateCodeReview">CreateCodeReview</a>.</p> </li> </ul>',
    )


class CodeReviewSummaries(RootModel[List[CodeReviewSummary]]):
    root: List[CodeReviewSummary]


class CodeReviewType(BaseModel):
    AnalysisTypes_1: Optional[AnalysisTypes] = Field(None, alias='AnalysisTypes')
    RepositoryAnalysis_1: RepositoryAnalysis = Field(..., alias='RepositoryAnalysis')


class CreateCodeReviewRequest(BaseModel):
    ClientRequestToken_1: Optional[ClientRequestToken] = Field(
        None, alias='ClientRequestToken'
    )
    Name: CodeReviewName
    RepositoryAssociationArn: AssociationArn
    Type: CodeReviewType


class ListCodeReviewsResponse(BaseModel):
    CodeReviewSummaries_1: Optional[CodeReviewSummaries] = Field(
        None, alias='CodeReviewSummaries'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListRecommendationsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RecommendationSummaries_1: Optional[RecommendationSummaries] = Field(
        None, alias='RecommendationSummaries'
    )
